
information = input("Student Information:")
exercises = input("Exercises:")
exam_p = input("Exam Points:")

student_infos = {}

with open(information) as file1:
    for line_info in file1:
        line_info = line_info.strip()
        parts_info = line_info.split(";")
        if parts_info[0] =="id":
            continue
        name = parts_info[1] + " " + parts_info [2]
        student_infos[parts_info[0]] = name

student_exercises = {}

with open(exercises) as file2:
    for line_exercises in file2:
        line_exercises = line_exercises.strip()
        parts_exercises = line_exercises.split(";")
        if parts_exercises[0] == "id":
            continue
        student_exercises[parts_exercises[0]] = sum(int(exercise) for exercise in parts_exercises[1:])

exam_points_sorted = {}

with open(exam_p) as file3:
    for line_exam_p in file3:
        line_exam_p = line_exam_p.strip()
        parts_exam_points = line_exam_p.split(";")
        if parts_exam_points[0] == "id":
            continue
        exam_points_sorted[parts_exam_points[0]] = sum(int(exams)for exams in parts_exam_points[1:])

student_exercise_points = {}

for id, points in student_exercises.items():
    exercises_per_student = student_exercises[id]
    if exercises_per_student >= 4 and exercises_per_student < 8:
        student_exercise_points[id] = 1
    elif exercises_per_student >= 8 and exercises_per_student < 12:
        student_exercise_points[id] = 2
    elif exercises_per_student >= 12 and exercises_per_student < 16:
        student_exercise_points[id] = 3
    elif exercises_per_student >= 16 and exercises_per_student < 20:
        student_exercise_points[id] = 4
    elif exercises_per_student >= 20 and exercises_per_student < 24:
        student_exercise_points[id] = 5
    elif exercises_per_student >= 24 and exercises_per_student < 28:
        student_exercise_points[id] = 6
    elif exercises_per_student >= 28 and exercises_per_student < 32:
        student_exercise_points[id] = 7
    elif exercises_per_student >= 32 and exercises_per_student < 36:
        student_exercise_points[id] = 8
    elif exercises_per_student >= 36 and exercises_per_student < 40:
        student_exercise_points[id] = 9
    elif exercises_per_student == 40:
        student_exercise_points[id] = 10
    else:
        student_exercise_points[id] = 0

total_points = {}    
for id, exam_points in exam_points_sorted.items():
    total_points[id] = exam_points + student_exercise_points[id]

grades = {}

for id, points in total_points.items():
    points_per_student = total_points[id]
    if points_per_student >= 15 and points_per_student < 18:
        grades[id] = 1
    elif points_per_student >= 18 and points_per_student < 21:
        grades[id] = 2
    elif points_per_student >= 21 and points_per_student < 24:
        grades[id] = 3
    elif points_per_student >= 24 and points_per_student < 28:
        grades[id] = 4
    elif points_per_student >= 28:
        grades[id] = 5
    else:
        grades[id] = 0

print("name                          exec_nbr  exec_pts. exm_pts.  tot_pts.  grade")
for id, name in student_infos.items():
    if id in student_infos:
        print(f"{student_infos[id]:<30}{student_exercises[id]:<10}{student_exercise_points[id]:<10}{exam_points_sorted[id]:<10}{total_points[id]:<10}{grades[id]:<10}")

# Above is my own made code, no AI for anything in it.
# Below is the AI optimised code, directly copied. I made sure it works but thats it.

def parse_file(filename, start_index=1, sum_exercises=False):
    """Utility function to parse CSV-like files and return a dictionary of id -> value."""
    data = {}
    with open(filename) as file:
        for line in file:
            line = line.strip()
            parts = line.split(";")
            if parts[0] == "id":
                continue
            if sum_exercises:
                data[parts[0]] = sum(int(x) for x in parts[start_index:])
            else:
                data[parts[0]] = ' '.join(parts[1:3])  # Name parsing
    return data

# Input paths for the files
information = input("Student Information: ")
exercises = input("Exercises: ")
exam_p = input("Exam Points: ")

# Step 1: Parse the files
student_infos = parse_file(information, start_index=1)
student_exercises = parse_file(exercises, start_index=1, sum_exercises=True)
exam_points_sorted = parse_file(exam_p, start_index=1, sum_exercises=True)

# Step 2: Assign exercise points using a simple range-based mapping
def assign_exercise_points(exercise_total):
    if exercise_total < 4:
        return 0
    elif exercise_total < 8:
        return 1
    elif exercise_total < 12:
        return 2
    elif exercise_total < 16:
        return 3
    elif exercise_total < 20:
        return 4
    elif exercise_total < 24:
        return 5
    elif exercise_total < 28:
        return 6
    elif exercise_total < 32:
        return 7
    elif exercise_total < 36:
        return 8
    elif exercise_total < 40:
        return 9
    elif exercise_total == 40:
        return 10
    return 0

student_exercise_points = {
    id: assign_exercise_points(exercise_total)
    for id, exercise_total in student_exercises.items()
}

# Step 3: Calculate total points (exam + exercise)
total_points = {
    id: exam_points_sorted.get(id, 0) + student_exercise_points.get(id, 0)
    for id in student_exercises.keys()
}

# Step 4: Assign grades based on total points using ranges
def assign_grade(total_points):
    if total_points >= 28:
        return 5
    elif total_points >= 24:
        return 4
    elif total_points >= 21:
        return 3
    elif total_points >= 18:
        return 2
    elif total_points >= 15:
        return 1
    return 0

grades = {
    id: assign_grade(points)
    for id, points in total_points.items()
}

# Step 5: Print the results
print(f"{'name':<30}{'exec_nbr':<10}{'exec_pts.':<10}{'exm_pts.':<10}{'tot_pts.':<10}{'grade':<10}")
for id, name in student_infos.items():
    exec_nbr = student_exercises.get(id, 0)
    exec_pts = student_exercise_points.get(id, 0)
    exm_pts = exam_points_sorted.get(id, 0)
    tot_pts = total_points.get(id, 0)
    grade = grades.get(id, 0)
    
    print(f"{name:<30}{exec_nbr:<10}{exec_pts:<10}{exm_pts:<10}{tot_pts:<10}{grade:<10}")
