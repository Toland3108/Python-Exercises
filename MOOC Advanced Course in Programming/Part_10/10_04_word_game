import random

class WordGame():
    def __init__(self, rounds: int):
        self.wins1 = 0
        self.wins2 = 0
        self.rounds = rounds

    def round_winner(self, player1_word: str, player2_word: str):
        # determine a random winner
        return random.randint(1, 2)

    def play(self):
        print("Word game:")
        for i in range(1, self.rounds+1):
            print(f"round {i}")
            answer1 = input("player1: ")
            answer2 = input("player2: ")

            if self.round_winner(answer1, answer2) == 1:
                self.wins1 += 1
                print("player 1 won")
            elif self.round_winner(answer1, answer2) == 2:
                self.wins2 += 1
                print("player 2 won")
            else:
                pass # it's a tie

        print("game over, wins:")
        print(f"player 1: {self.wins1}")
        print(f"player 2: {self.wins2}")

# LongestWord class
class LongestWord(WordGame):
    def __init__(self, rounds: int):
        super().__init__(rounds)

    def round_winner(self, player1_word: str, player2_word: str):
        if len(player1_word) > len(player2_word):
            return 1
        elif len(player2_word) > len(player1_word):
            return 2
        return 0  # Tie

class MostVowels(WordGame):
    def __init__(self, rounds: int):
        super().__init__(rounds)

    def round_winner(self, player1_word: str, player2_word: str):
        def count_vowels(word):
            return sum(1 for char in word.lower() if char in "aeiou")
        
        vowels1 = count_vowels(player1_word)
        vowels2 = count_vowels(player2_word)

        if vowels1 > vowels2:
            return 1
        elif vowels2 > vowels1:
            return 2
        return 0  # Tie

# RockPaperScissors class
class RockPaperScissors(WordGame):
    def __init__(self, rounds: int):
        super().__init__(rounds)

    def round_winner(self, player1_word: str, player2_word: str):
        valid_choices = {"rock", "paper", "scissors"}
        if player1_word not in valid_choices and player2_word not in valid_choices:
            return 0  # Tie
        elif player1_word not in valid_choices:
            return 2  # Invalid choice for player 1
        elif player2_word not in valid_choices:
            return 1  # Invalid choice for player 2

        # Determine winner based on rules
        if (player1_word == "rock" and player2_word == "scissors") or \
           (player1_word == "scissors" and player2_word == "paper") or \
           (player1_word == "paper" and player2_word == "rock"):
            return 1
        elif (player2_word == "rock" and player1_word == "scissors") or \
             (player2_word == "scissors" and player1_word == "paper") or \
             (player2_word == "paper" and player1_word == "rock"):
            return 2

        return 0  # Tie