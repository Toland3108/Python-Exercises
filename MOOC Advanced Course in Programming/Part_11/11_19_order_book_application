class Task:
    id_counter = 1 
    
    def __init__(self, description: str, programmer: str, workload: int):
        self.id = Task.id_counter 
        Task.id_counter += 1 
        self.description = description
        self.programmer = programmer
        self.workload = workload
        self.finished = False

    def is_finished(self) -> bool:
        return self.finished

    def mark_finished(self):
        self.finished = True

    def __str__(self):
        status = "FINISHED" if self.finished else "NOT FINISHED"
        return f"{self.id}: {self.description} ({self.workload} hours), programmer {self.programmer} {status}"


class OrderBook:
    def __init__(self):
        self.tasks = []  
    
    def add_order(self, description: str, programmer: str, workload: int):
        task = Task(description, programmer, workload)
        self.tasks.append(task)

    def all_orders(self):
        return self.tasks

    def programmers(self):
        return list(set(task.programmer for task in self.tasks))

    def mark_finished(self, id: int):
        task = next((task for task in self.tasks if task.id == id), None)
        if task is None:
            raise ValueError(f"No task with id {id}")
        task.mark_finished()

    def finished_orders(self):
        return [task for task in self.tasks if task.is_finished()]

    def unfinished_orders(self):
        return [task for task in self.tasks if not task.is_finished()]

    def status_of_programmer(self, programmer: str):
        finished_count = sum(1 for task in self.tasks if task.programmer == programmer and task.is_finished())
        unfinished_count = sum(1 for task in self.tasks if task.programmer == programmer and not task.is_finished())
        finished_workload = sum(task.workload for task in self.tasks if task.programmer == programmer and task.is_finished())
        unfinished_workload = sum(task.workload for task in self.tasks if task.programmer == programmer and not task.is_finished())

        if finished_count + unfinished_count == 0:
            raise ValueError(f"No tasks found for programmer {programmer}")
        
        return (finished_count, unfinished_count, finished_workload, unfinished_workload)


def handle_command(order_book):
    """Handle the user input commands."""
    while True:
        print("commands:")
        print("0 exit")
        print("1 add order")
        print("2 list finished tasks")
        print("3 list unfinished tasks")
        print("4 mark task as finished")
        print("5 programmers")
        print("6 status of programmer")

        command = input("command: ")
        
        if command == "0":
            break

        elif command == "1":
            description = input("description: ")
            programmer_workload = input("programmer and workload estimate: ")
            try:
                programmer, workload = programmer_workload.split()
                workload = int(workload)
                order_book.add_order(description, programmer, workload)
                print("added!")
            except ValueError:
                print("erroneous input")
        
        elif command == "2":
            finished_tasks = order_book.finished_orders()
            if not finished_tasks:
                print("no finished tasks")
            else:
                for task in finished_tasks:
                    print(task)

        elif command == "3":
            unfinished_tasks = order_book.unfinished_orders()
            for task in unfinished_tasks:
                print(task)

        elif command == "4":
            task_id = input("id: ")
            try:
                task_id = int(task_id)
                order_book.mark_finished(task_id)
                print("marked as finished")
            except ValueError:
                print("erroneous input")

        elif command == "5":
            programmers = order_book.programmers()
            for programmer in programmers:
                print(programmer)

        elif command == "6":
            programmer = input("programmer: ")
            try:
                status = order_book.status_of_programmer(programmer)
                print(f"tasks: finished {status[0]} not finished {status[1]}, hours: done {status[2]} scheduled {status[3]}")
            except ValueError:
                print("erroneous input")

        else:
            print("erroneous input")



orders = OrderBook()
handle_command(orders)